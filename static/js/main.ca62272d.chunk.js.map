{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","services/service.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","style","backgroundColor","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","console","log","setState","this","AppBar","appBar","position","Toolbar","Button","border","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca62272d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3D9po\",\"card\":\"Cards_card__2MT8y\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Not fetched\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n          style={{ backgroundColor: \"#FF0000\" }}\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              color=\"textSecondary\"\r\n              style={{ color: \"white\" }}\r\n              gutterBottom\r\n            >\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\" style={{ color: \"white\" }}>\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" style={{ color: \"white\" }}>\r\n              Last Updated: {new Date(lastUpdate).toString()}\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n          style={{ backgroundColor: \"green\" }}\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              color=\"textSecondary\"\r\n              style={{ color: \"white\" }}\r\n              gutterBottom\r\n            >\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\" style={{ color: \"white\" }}>\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" style={{ color: \"white\" }}>\r\n              Last Updated: {new Date(lastUpdate).toString()}\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n          style={{ backgroundColor: \"blue\t\" }}\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              color=\"textSecondary\"\r\n              style={{ color: \"white\" }}\r\n              gutterBottom\r\n            >\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\" style={{ color: \"white\" }}>\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" style={{ color: \"white\" }}>\r\n              Last Updated: {new Date(lastUpdate).toString()}\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) { }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(\"https://covid19.mathdro.id/api/daily\");\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) { }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries }\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) { }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../services/service\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"red\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"blue\",\r\n            backgroundColor: \"blue\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\"red\", \"green\", \"blue\"],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current stats in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../services/service\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    }\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl} >\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\" >Global</option>\r\n        {fetchedCountries.map((country, i) =>\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        )}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\n\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./services/service\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  };\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n    //console.log(data);\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    console.log(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <AppBar className={styles.appBar} position=\"static\" style={{ backgroundColor: \"black\" }}>\r\n          <Toolbar>\r\n\r\n            <Typography variant=\"h6\" className={styles.title}>\r\n              <Button color=\"inherit\" style={{ border: '2px solid' }}> COVID19 Dashboard </Button>\r\n            </Typography>\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDom.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3wenB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1bYt0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__tqOd6\"};"],"sourceRoot":""}